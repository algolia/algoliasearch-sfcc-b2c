'use strict';

/*
    path to the zip:
        Impex / src / platform / outbox / <consumer> / <exportFile> / <seqNum>.zip

    zip structure
        <seqNum>.zip / <uuid> / catalogs / <catalogID> / catalog.xml

    consumer - job step parameter - comma-separated values - creates deltas for multiple consumers if requested, we'll only use one value
    exportFile - job step parameter - it's actually a folder, the CatalogDeltaExport system job step calls it a file, so we'll keep it like this for consistencies' sake
    seqNum - six-digit zero-padded sequential number, each run of the delta export job increments it by one - looks like this: 000001, 000002, etc.
    uuid - randomly generated by the delta export, looks like this: ebff9c4e-ac8c-4954-8303-8e68ec8b190d
    catalogID - job step parameter - comma-separated values - creates a separate folder for each catalogID supplied
 */


/**
 * Second job step of the "AlgoliaProductsDeltaExport" job.
 * Takes the delta export created by the CatalogDeltaExport system job step,
 * enriches/transforms it and then sends it to Algolia for indexing
 * @param {HashMap} parameters job step parameters - make sure to define the parameters for both job steps as job parameters, not step parameters so that they're the same
 * @returns {dw.system.Status} Status
*/
function sendDeltaExportProducts(parameters) {

    var File = require('dw/io/File');
    var FileWriter = require('dw/io/FileWriter');
    var XMLStreamWriter = require('dw/io/XMLStreamWriter');
    var Status = require('dw/system/Status');
    var changedProducts = {};

    var algoliaData = require('*/cartridge/scripts/algolia/lib/algoliaData');
    var algoliaConstants = require('*/cartridge/scripts/algolia/lib/algoliaConstants');
    var jobHelper = require('*/cartridge/scripts/algolia/helper/jobHelper');
    var productLogData = algoliaData.getLogData('LastProductSyncLog');



    const TEST_MODE = true;



    if (!TEST_MODE) {

        var paramConsumer = parameters.consumers.split(',')[0].trim(); // comma-separated values, but we only need one copy, so ignoring the rest
        var paramExportFile = parameters.exportFile; // it's actually a folder

        var success = false;


        // TODO: remove, only for testing:
        if (TEST_MODE) {
            paramConsumer = 'Algolia';
            paramExportFile = 'ProductDeltaExport';
        }
        // TODO END


        var l0_deltaExportDir = new File(algoliaConstants.ALGOLIA_DELTA_EXPORT_BASE_FOLDER + paramConsumer + '/' + paramExportFile); // Impex/src/platform/outbox/algolia/productDeltaExport

        var l1_processingDir = new File(l0_deltaExportDir, '_processing');
        l1_processingDir.mkdir();

        if (!TEST_MODE) {
            var l1_completedDir = new File(l0_deltaExportDir, '_completed');
            l1_completedDir.mkdir();
        }


        var deltaExportZips = jobHelper.getDeltaExportZipList(l0_deltaExportDir);

        // process each export zip one by one
        deltaExportZips.forEach(function(filename) {
            var currentZipFile = new File(l0_deltaExportDir, filename); // 000001.zip
            var currentMetaFile = new File(l0_deltaExportDir, filename.replace('.zip', '.meta'));

            // this will create a structure like so: "l0_deltaExportDir/processing/000001/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/catalogs/apparel-catalog/catalog.xml"
            var l2_tempZipDir = new File(l1_processingDir, filename);
            if (l2_tempZipDir.mkdir()) { // mkdir() returns a success boolean
                currentZipFile.unzip(l2_tempZipDir);
            }

            var l3_uuidDir = jobHelper.getFirstChildFolder(l2_tempZipDir); // processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/
            var l4_catalogsDir = new File(l3_uuidDir, 'catalogs'); // processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/catalogs/

            // getting child catalog folders
            var l5_catalogDirList = jobHelper.getChildFolders(l4_catalogsDir);

            // processing catalog.xml files
            l5_catalogDirList.forEach(function(l5_catalogDir) {
                var catalogFile = new File(l5_catalogDir, 'catalog.xml');
                success = jobHelper.buildChangedProductsObjectFromXML(catalogFile, changedProducts);
                if (success) {
                    // deleting successfully processed files and their parent folders
                    success = catalogFile.remove() && l5_catalogDir.remove();
                }
            });

            // cleanup
            if (success) {
                l4_catalogsDir.remove();
                new File(l3_uuidDir, 'version.txt').remove(); // removing version.txt so that parent folder can be deleted
                l3_uuidDir.remove();
                l2_tempZipDir.remove();

                // move zip to _complete
                if (!TEST_MODE) { // don't move the files while testing
                    currentZipFile.copyTo(new File(l1_completedDir, currentZipFile.getName())) && currentZipFile.remove();
                    currentMetaFile.copyTo(new File(l1_completedDir, currentMetaFile.getName())) && currentMetaFile.remove();
                }
            }

        });

        // cleanup
        l1_processingDir.remove();
    }


    // retrieving and enriching products, writing them to a temporary XML
    var productsWrittenToXML = 0;

    if (TEST_MODE) { // use a sample changedProducts object instead of regenerating it over and over from the file
        changedProducts = {
            "701642853695M": true,
            "test-product": true,
            "test-product-to-be-deleted-immediately": false,
        };

        var l0_deltaExportDir = new File(File.IMPEX + '/src/platform/outbox/Algolia/ProductDeltaExport');
    }


    if (!TEST_MODE) {

        // Open Delta XML file to write
        var updateFile, updateFileWriter, updateXmlWriter;
        try {
            updateFile = new File(l0_deltaExportDir, algoliaConstants.ALGOLIA_DELTA_EXPORT_UPDATE_FILE_NAME);
            if (updateFile.exists()) {
                updateFile.remove();
            }
            updateFileWriter = new FileWriter(updateFile, 'UTF-8');
            updateXmlWriter = new XMLStreamWriter(updateFileWriter);
            updateXmlWriter.writeStartDocument();
            updateXmlWriter.writeStartElement('products');
        } catch (error) {
            var e = error;
            jobHelper.logFileError(updateFile.fullPath, 'Error open Delta file to write', error);
            productLogData.processedErrorMessage = 'Error open Delta file to write';
            algoliaData.setLogData('LastProductSyncLog', productLogData);
            return new Status(Status.ERROR);
        }





        for (var productID in changedProducts) {
            var isAvailable = changedProducts[productID];
            var productUpdate;

            if (isAvailable) { // <productID>: true - product was either added or modified

                var productFilter = require('*/cartridge/scripts/algolia/filters/productFilter');
                var AlgoliaProduct = require('*/cartridge/scripts/algolia/model/algoliaProduct');

                var ProductMgr = require('dw/catalog/ProductMgr');

                var product = ProductMgr.getProduct(productID);
                var algoliaProduct = new AlgoliaProduct(product);

                productUpdate = new jobHelper.UpdateProductModel(algoliaProduct);
                var a = 5;

            } else { // <proudctID>: false - product is to be deleted
                productUpdate = {
                    topic: 'products/delete',
                    resource_type: 'product',
                    resource_id: productID
                };

                var b = 4;
            }

            // Write delta to file
            if (productUpdate) {
                try {
                    jobHelper.writeObjectToXMLStream(updateXmlWriter, productUpdate);
                } catch (error) {
                    jobHelper.logFileError(updateFile.fullPath, 'Error write to file', error);
                    productLogData.processedErrorMessage = 'Error write to file';
                    algoliaData.setLogData('LastProductSyncLog', productLogData);
                    updateFileWriter.close();
                    updateXmlWriter.close();
                    return new Status(Status.ERROR);
                }
                productsWrittenToXML++;
            }

        }

        // Close XML Update file
        updateXmlWriter.writeEndElement();
        updateXmlWriter.writeEndDocument();
        updateXmlWriter.close();
        updateFileWriter.close();

        jobHelper.logFileInfo(updateFile.fullPath, 'Records for update ' + productsWrittenToXML + ' records');

        algoliaData.setLogData('LastProductSyncLog', {
            processedDate: algoliaData.getLocalDateTime(new Date()),
            processedError: false,
            processedErrorMessage: '',
            processedToUpdateRecords: productsWrittenToXML,
        });

    } // END WRITING FILE

    if (TEST_MODE) {
        var paramConsumer = 'Algolia';
        var paramExportFile = 'ProductDeltaExport';
        var l0_deltaExportDir = new File(algoliaConstants.ALGOLIA_DELTA_EXPORT_BASE_FOLDER + paramConsumer + '/' + paramExportFile); // Impex/src/platform/outbox/algolia/productDeltaExport
        var updateFile = new File(l0_deltaExportDir, algoliaConstants.ALGOLIA_DELTA_EXPORT_UPDATE_FILE_NAME);
    }


    // send the update file
    var sendDelta = require('*/cartridge/scripts/algolia/helper/sendDelta');
    var deltaIterator = require('*/cartridge/scripts/algolia/helper/deltaIterator');

    var deltaList = deltaIterator.create(updateFile.fullPath, 'product');
    var status = sendDelta(deltaList, 'LastProductSyncLog', parameters);

    if (!status.error) {
        updateFile.remove();
    }


    return status;







    // there can be so many errors in so many places - wrap the whole thing in a try-catch


    /*

    custom status codes can be defined and used in steptypes.json:
    https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fjobs%2Fb2c_job_step_exit_status.html&resultof=%22%73%74%61%74%75%73%22%20%22%73%74%61%74%75%22%20%22%63%6f%64%65%73%22%20%22%63%6f%64%65%22%20
    */


    // return new Status(Status.OK);
}

module.exports.sendDeltaExportProducts = sendDeltaExportProducts;


