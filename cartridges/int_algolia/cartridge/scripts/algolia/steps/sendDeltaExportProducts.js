'use strict';

/*
    The CatalogDeltaExport job step creates the following folder structure with the default configuration:

    path to the delta export zip:
        Impex / src / platform / outbox / <consumer> / <exportFile> / <seqNum>.zip

    the zip file's structure once extracted:
        <seqNum>.zip / <UUID> / catalogs / <catalogID> / catalog.xml

    consumer - one of the consumers supplied as the job step parameter "consumers" (comma-separated values) - a separate folder is created for each consumer supplied - CatalogDeltaExport supports multiple consumers, but this job step supports only one.
    exportFile - job step parameter - it's actually a folder, the CatalogDeltaExport system job step calls it a file, so we'll keep it like this for consistencies' sake
    seqNum - six-digit zero-padded sequential number, each run of the delta export job increments it by one - looks like this: 000001, 000002, etc.
    UUID - randomly generated by the delta export, looks like this: ebff9c4e-ac8c-4954-8303-8e68ec8b190d
    catalogID - one of the catalogIDs supplied as the job step parameter "catalogIDs" (comma-separated values) - a separate folder is created for each catalogID supplied (but only if there were changes to that catalog)
 */


/**
 * Second job step of the "AlgoliaProductsDeltaExport" job.
 * Takes the delta export created by the CatalogDeltaExport system job step,
 * enriches/transforms it and then sends it to Algolia for indexing.
 * @param {dw.util.HashMap} parameters Job step parameters - make sure to define the parameters for both job steps as job parameters, not step parameters so that they're shared across the job steps
 * @returns {dw.system.Status} Status
*/
function sendDeltaExportProducts(parameters) {

    var File = require('dw/io/File');
    var FileWriter = require('dw/io/FileWriter');
    var XMLStreamWriter = require('dw/io/XMLStreamWriter');
    var Status = require('dw/system/Status');

    var algoliaData = require('*/cartridge/scripts/algolia/lib/algoliaData');
    var algoliaConstants = require('*/cartridge/scripts/algolia/lib/algoliaConstants');
    var jobHelper = require('*/cartridge/scripts/algolia/helper/jobHelper');

    var changedProducts = {};
    var success = false;


    // ----------------------------- PART 1: Extracting productIDs from the output of the Delta Export -----------------------------


    // checking if mandatory parameters are present
    if (empty(parameters.consumers) || empty(parameters.exportFile)) {
        let errorMessage = 'Mandatory job parameters missing!';
        jobHelper.logError(errorMessage);
        return new Status(Status.ERROR, 'MissingJobParameters', errorMessage);
    }

    var paramConsumer = parameters.consumers.split(',')[0].trim(); // comma-separated values, but we only need one copy, so ignoring the rest
    var paramExportFile = parameters.exportFile; // it's actually a folder

    // creating working folder (same as the delta export output folder) - if there were no previous changes, the delta export job step won't create it
    var l0_deltaExportDir = new File(algoliaConstants.ALGOLIA_DELTA_EXPORT_BASE_FOLDER + paramConsumer + '/' + paramExportFile); // Impex/src/platform/outbox/algolia/productDeltaExport
    l0_deltaExportDir.mkdirs();

    // creating temporary "_processing" dir
    var l1_processingDir = new File(l0_deltaExportDir, '_processing');
    l1_processingDir.mkdir();

    // creating "_completed" dir
    var l1_completedDir = new File(l0_deltaExportDir, '_completed');
    l1_completedDir.mkdir(); // creating "_completed" folder -- does no harm if already exists

    // list all the delta export zips in the folder
    var deltaExportZips = jobHelper.getDeltaExportZipList(l0_deltaExportDir);

    // process each export zip one by one
    deltaExportZips.forEach(function(filename) {
        var currentZipFile = new File(l0_deltaExportDir, filename); // 000001.zip, 000002.zip, etc.
        var currentMetaFile = new File(l0_deltaExportDir, filename.replace('.zip', '.meta')); // each .zip has a corresponding .meta file as well, we'll need to delete these later

        // this will create a structure like so: "l0_deltaExportDir/processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/catalogs/apparel-catalog/catalog.xml"
        var l2_tempZipDir = new File(l1_processingDir, filename);
        if (l2_tempZipDir.mkdir()) { // mkdir() returns a success boolean
            currentZipFile.unzip(l2_tempZipDir);
        }

        // there's a folder with a UUID as a name one level down, we need to open that
        var l3_uuidDir = jobHelper.getFirstChildFolder(l2_tempZipDir); // processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/

        // UUID-named folder has a folder called "catalogs" in it, open that
        var l4_catalogsDir = new File(l3_uuidDir, 'catalogs'); // processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/catalogs/

        // getting child catalog folders, there can be more than one - folder name is the ID of the catalog
        var l5_catalogDirList = jobHelper.getChildFolders(l4_catalogsDir);

        // processing catalog.xml files in each
        l5_catalogDirList.forEach(function(l5_catalogDir) {
            var catalogFile = new File(l5_catalogDir, 'catalog.xml');

            // adding productsIDs from the XML to the list of changed productIDs
            success = jobHelper.updateChangedProductsObjectFromXML(catalogFile, changedProducts);
            if (success) {
                // deleting successfully processed files and their parent folders
                success = catalogFile.remove() && l5_catalogDir.remove();
            }
        });

        // cleanup, removing unzipped files that are already processed and their parent dirs
        if (success) {
            l4_catalogsDir.remove();
            new File(l3_uuidDir, 'version.txt').remove(); // removing version.txt so that parent folder can be deleted
            l3_uuidDir.remove();
            l2_tempZipDir.remove();

            // moving processed zip files to the "_completed" folder for archival
            currentZipFile.copyTo(new File(l1_completedDir, currentZipFile.getName())) && currentZipFile.remove();
            currentMetaFile.copyTo(new File(l1_completedDir, currentMetaFile.getName())) && currentMetaFile.remove();
        } else {
            let errorMessage = 'Error while processing ' + filename;
            jobHelper.logError(errorMessage);
            return new Status(Status.ERROR, 'ProcessingError', errorMessage);
        }
    });

    // cleanup - removing "_processing" dir
    l1_processingDir.remove();


    // ----------------------------- PART 2: Retrieving and enriching the products, writing them to XML -----------------------------


    // retrieving and enriching products, writing them to a temporary XML
    var productsWrittenToXML = 0;

    // Open Delta XML file to write
    var updateFile, updateFileWriter, updateXmlWriter;
    try {
        updateFile = new File(l0_deltaExportDir, algoliaConstants.ALGOLIA_DELTA_EXPORT_UPDATE_FILE_NAME);

        // if there's already an update XML there from a previous unsuccessful attempt, remove it
        if (updateFile.exists()) {
            updateFile.remove();
        }

        // creating file, writing start elements
        updateFileWriter = new FileWriter(updateFile, 'UTF-8');
        updateXmlWriter = new XMLStreamWriter(updateFileWriter);
        updateXmlWriter.writeStartDocument();
        updateXmlWriter.writeStartElement('products');

    } catch (error) {
        jobHelper.logFileError(updateFile.fullPath, 'Error opening delta XML for writing', error);
        return new Status(Status.ERROR);
    }

    // retrieving products from database and enriching them
    for (var productID in changedProducts) {
        var isAvailable = changedProducts[productID]; // true if added/changed, false if deleted
        var productUpdateObj;

        if (isAvailable) { // <productID>: true - product was either added or modified

            var productFilter = require('*/cartridge/scripts/algolia/filters/productFilter');
            var AlgoliaProduct = require('*/cartridge/scripts/algolia/model/algoliaProduct');

            var ProductMgr = require('dw/catalog/ProductMgr');

            var product = ProductMgr.getProduct(productID);
            var algoliaProduct = new AlgoliaProduct(product);

            productUpdateObj = new jobHelper.UpdateProductModel(algoliaProduct);

        } else { // <proudctID>: false - product is to be deleted
            productUpdateObj = {
                topic: 'products/delete',
                resource_type: 'product',
                resource_id: productID
            };
        }

        // writing product data to file
        if (productUpdateObj) {
            try {
                jobHelper.writeObjectToXMLStream(updateXmlWriter, productUpdateObj);
            } catch (error) {
                jobHelper.logFileError(updateFile.fullPath, 'Error writing to file', error);
                updateFileWriter.close();
                updateXmlWriter.close();
                return new Status(Status.ERROR);
            }
            productsWrittenToXML++;
        }
    }

    // closing XML update file
    updateXmlWriter.writeEndElement();
    updateXmlWriter.writeEndDocument();
    updateXmlWriter.close();
    updateFileWriter.close();

    // writing success log
    jobHelper.logFileInfo(updateFile.fullPath, productsWrittenToXML + ' records written to update XML file');


    // ----------------------------- PART 3: Sending the contents of the XML to Algolia -----------------------------


    var status = new Status(Status.ERROR);

    var sendDelta = require('*/cartridge/scripts/algolia/helper/sendDelta');
    var deltaIterator = require('*/cartridge/scripts/algolia/helper/deltaIterator');

    // opening delta XML and sending contents to Algolia
    var deltaList = deltaIterator.create(updateFile.fullPath, 'product');
    if (!empty(deltaList)) {
        status = sendDelta(deltaList, 'LastProductSyncLog', parameters); // returns Status.OK if all is well
    }

    // remove update file if successfully sent
    if (!status.error) {
        updateFile.remove();
    }

    return status;
}

module.exports.sendDeltaExportProducts = sendDeltaExportProducts;
