'use strict';

var File = require('dw/io/File');

/*
    path to the zip:
        Impex / src / platform / outbox / <consumer> / <exportFile> / <seqNum>.zip

    zip structure
        <seqNum>.zip / <uuid> / catalogs / <catalogID> / catalog.xml

    consumer - job step parameter - comma-separated values - creates deltas for multiple consumers if requested, we'll only use one value
    exportFile - job step parameter - it's actually a folder, the CatalogDeltaExport system job step calls it a file, so we'll keep it like this for consistencies' sake
    seqNum - six-digit zero-padded sequential number, each run of the delta export job increments it by one - looks like this: 000001, 000002, etc.
    uuid - randomly generated by the delta export, looks like this: ebff9c4e-ac8c-4954-8303-8e68ec8b190d
    catalogID - job step parameter - comma-separated values - creates a separate folder for each catalogID supplied
*/


/**
 * Retrieves the first child folder within the specified parent folder path.
 *
 * @param {dw.io.File} folder - The path to the parent folder.
 * @returns {dw.io.File|null} The first child folder as a `dw.io.File` instance, or `null` if no child folders are found.
 */
function getFirstChildFolder(folder) {
    if (!empty(folder) && folder.isDirectory()) {
        var files = folder.listFiles();
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            if (file.isDirectory()) {
                return file;
            }
        }
    }

    return null;
}


/**
 * Retrieves the list of delta export zips from the specified folder.
 *
 * @param {dw.io.File} folder - The folder containing the zip files.
 * @returns {string[]} An array of zip file names which match the pattern.
 */
function getDeltaExportZipList(folder) {

    // return all file names in export folder as an array of strings
    var exportDirFiles = folder.list(); // returns an array of strings with the files or null if not a folder

    // if delta export folder is empty or doesn't exist, don't continue
    if (empty(exportDirFiles) || !folder.isDirectory()) {
        return [];
    } else {
        // filter and sort file names - results returned by list() are unsorted
        return exportDirFiles.filter(function(file) {
            return !!file.match(/^\d{6}\.zip$/); // file name must be a six-character sequential number with a .zip extension
        }).sort();
    }
}


/**
 * Retrieves the child folders of a given folder.
 *
 * @param {dw.io.File} folder - The folder to be searched
 * @returns {dw.io.File[]} An array of subfolders
 */
function getChildFolders(folder) {
    if (empty(folder) || !folder.isDirectory()) {
        return [];
    } else {
        return folder.listFiles(function(file) {
            return file.isDirectory();
        }).toArray().sort();
    }
}


/**
 * Takes each XML file in sequential order and retrieves the changed products' IDs from it.
 * Adds it to the productDeltaModel that is built in memory, which looks like this:
 * productDeltaModel: {
 *     'apparel-catalog': {
 *         'productID1': true,
 *         'productID2': false,
 *         [...]
 *     },
 *     'apparel-m-catalog': {
 *         'productID3': false,
 *         [...]
 *     },
 *     [...]
 * }
 * If there are multiple delta export files and a certain product had multiple changes happening to it,
 * the newer event will overwrite the older one (e.g. if a product was modified and then deleted or
 * if a product was deleted and then re-added in another XML).
 * The Boolean value of the productID keys indicates whether the product was added/changed (true)
 * or removed with <product mode="delete" product-id=""/> (false).
 * These products will then be retrieved from the database, enriched and then sent to Algolia (or marked for deletion).
 *
 * @param {dw.io.File} file - The path to the XML file.
 * @param {string} productDeltaModel - The productDeltaModel being built
 * @returns {Object} An object with product IDs as keys and their availability status as values.
 */
function buildproductDeltaModelFromXML(file, productDeltaModel) {
    var XMLStreamReader = require('dw/io/XMLStreamReader');
    var XMLStreamConstants = require('dw/io/XMLStreamConstants');
    var FileReader = require('dw/io/FileReader');
    var catalogID;

    if (file.exists()) {
        var fileReader = new FileReader(file);
        var xmlStreamReader = new XMLStreamReader(fileReader);
        var success = false;

        while (xmlStreamReader.hasNext()) {
            var xmlEvent = xmlStreamReader.next();

            if (xmlEvent === XMLStreamConstants.START_ELEMENT) {
                if (xmlStreamReader.getLocalName() === 'catalog') {
                    catalogID = xmlStreamReader.getAttributeValue(null, 'catalog-id');
                }
                if (xmlStreamReader.getLocalName() === 'product') {
                    var productID = xmlStreamReader.getAttributeValue(null, 'product-id');
                    var mode = xmlStreamReader.getAttributeValue(null, 'mode');
                    var isAvailable = mode !== 'delete';
                    productDeltaModel[catalogID] = productDeltaModel[catalogID] || {};
                    productDeltaModel[catalogID][productID] = isAvailable;
                }
            }

            if (xmlEvent === XMLStreamConstants.END_ELEMENT && xmlStreamReader.getLocalName() === 'catalog') {
                success = true;
            }
        }
        xmlStreamReader.close();
    };

    return success;
}


/**
 * Second job step of the "AlgoliaProductsDeltaExport" job.
 * Takes the delta export created by the CatalogDeltaExport system job step,
 * enriches/transforms it and then sends it to Algolia for indexing
 * @param {HashMap} parameters job step parameters - make sure to define the parameters for both job steps as job parameters, not step parameters so that they're the same
 * @returns {dw.system.Status} Status
*/
function sendDeltaExportProducts(parameters) {
    var Status = require('dw/system/Status');
    var productDeltaModel = {};

    var algoliaConstants = require('*/cartridge/scripts/algolia/lib/algoliaConstants');

    var paramConsumer = parameters.consumers.split(',')[0].trim(); // comma-separated values, but we only need one copy, so ignoring the rest
    var paramExportFile = parameters.exportFile; // it's actually a folder

    var success = false;


    // TODO: remove, only for testing:
    paramConsumer = 'Algolia';
    paramExportFile = 'ProductDeltaExport';
    // TODO END


    var l0_deltaExportDir = new File(algoliaConstants.ALGOLIA_DELTA_EXPORT_BASE_FOLDER + paramConsumer + '/' + paramExportFile); // Impex/src/platform/outbox/algolia/productDeltaExport

    var l1_processingDir = new File(l0_deltaExportDir, '_processing');
    l1_processingDir.mkdir();

    var l1_completedDir = new File(l0_deltaExportDir, '_completed');
    l1_completedDir.mkdir();


    var deltaExportZips = getDeltaExportZipList(l0_deltaExportDir);

    // process each export zip one by one
    deltaExportZips.forEach(function(filename) {
        var currentZipFile = new File(l0_deltaExportDir, filename); // 000001.zip
        var currentMetaFile = new File(l0_deltaExportDir, filename.replace('.zip', '.meta'));

        // this will create a structure like so: "l0_deltaExportDir/processing/000001/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/catalogs/apparel-catalog/catalog.xml"
        var l2_tempZipDir = new File(l1_processingDir, filename);
        if (l2_tempZipDir.mkdir()) { // mkdir() returns a success boolean
            currentZipFile.unzip(l2_tempZipDir);
        }

        var l3_uuidDir = getFirstChildFolder(l2_tempZipDir); // processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/
        var l4_catalogsDir = new File(l3_uuidDir, 'catalogs'); // processing/000001.zip/ebff9c4e-ac8c-4954-8303-8e68ec8b190d/catalogs/

        // getting child catalog folders
        var l5_catalogDirList = getChildFolders(l4_catalogsDir);

        // processing catalog.xml files
        l5_catalogDirList.forEach(function(l5_catalogDir) {
            var catalogFile = new File(l5_catalogDir, 'catalog.xml');
            success = buildproductDeltaModelFromXML(catalogFile, productDeltaModel);
            if (success) {
                // deleting successfully processed files and their parent folders
                success = catalogFile.remove() && l5_catalogDir.remove();
            }
        });

        // cleanup
        if (success) {
            l4_catalogsDir.remove();
            new File(l3_uuidDir, 'version.txt').remove(); // removing version.txt so that parent folder can be deleted
            l3_uuidDir.remove();
            l2_tempZipDir.remove();

            // move zip to _complete
            currentZipFile.copyTo(new File(l1_completedDir, currentZipFile.getName())) && currentZipFile.remove();
            currentMetaFile.copyTo(new File(l1_completedDir, currentMetaFile.getName())) && currentMetaFile.remove();
        }

    });

    // cleanup
    l1_processingDir.remove();



    var x = 5;


    // there can be so many errors in so many places - wrap the whole thing in a try-catch


    /*

    custom status codes can be defined and used in steptypes.json:
    https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fjobs%2Fb2c_job_step_exit_status.html&resultof=%22%73%74%61%74%75%73%22%20%22%73%74%61%74%75%22%20%22%63%6f%64%65%73%22%20%22%63%6f%64%65%22%20
    */
    return new Status(Status.OK);
}

module.exports.sendDeltaExportProducts = sendDeltaExportProducts;



