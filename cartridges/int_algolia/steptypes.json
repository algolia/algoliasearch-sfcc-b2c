{
	"step-types": {
		"script-module-step": [{
			"@type-id": "custom.algoliaSendDeltaExportProducts",
			"@supports-parallel-execution": "false",
			"@supports-site-context": "true",
			"@supports-organization-context": "false",
			"description": "Takes the product delta export created by SFCC, extracts the PIDs from it, retrieves and enriches the products, then sends them to Algolia. Performs a full update on product objects; product objects in the index are fully replaced with any new data with the same productID (objectID in the index).",
			"module": "int_algolia/cartridge/scripts/algolia/steps/sendDeltaExportProducts.js",
			"function": "sendDeltaExportProducts",
			"transactional": "false",
			"timeout-in-seconds": "28800",
			"parameters": {
				"parameter": [{
						"@name": "consumer",
						"@type": "string",
						"description": "The name of the consumer to be used for retrieving the delta export file. Also determines the WebDAV folder for the B2C delta export, together with the deltaExportJobName parameter.",
						"@required": "true",
						"@trim": "true"
					},
					{
						"@name": "deltaExportJobName",
						"@type": "string",
						"description": "The name of the delta export job to be used for retrieving the delta export file. Also determines the WebDAV folder for the B2C delta export, together with the consumer parameter.",
						"@required": "true",
						"@trim": "true"
					}
				]
			},
			"status-codes": {
				"status": [{
						"@code": "ERROR",
						"description": "Used when the step failed with an error."
					},
					{
						"@code": "FINISHED",
						"description": "Used when the step finished successfully."
					},
					{
						"@code": "FINISHED_WITH_WARNINGS",
						"description": "Used when the step finished with warnings."
					}
				]
			}
		},
		{
			"@type-id": "custom.algoliaSendCategories",
			"@supports-parallel-execution": "false",
			"@supports-site-context": "true",
			"@supports-organization-context": "false",
			"description": "Index the site's categories into Algolia",
			"module": "int_algolia/cartridge/scripts/algolia/job/sendCategories.js",
			"function": "execute",
			"transactional": "false",
			"timeout-in-seconds": "600",
			"parameters": {},
			"status-codes": {
				"status": []
			}
		}],
		"chunk-script-module-step": [{
				"@type-id": "custom.sendChunkOrientedProductUpdates",
				"@supports-parallel-execution": true,
				"@supports-site-context": true,
				"@supports-organization-context": false,
				"description": "Sends chunk-oriented updates of all products assigned to the selected site to Algolia. Only the specified fields will be updated in the index. Can be used for partially updating the records with only a few attributes or for full record updates.",
				"module": "int_algolia/cartridge/scripts/algolia/steps/sendChunkOrientedProductUpdates.js",
				"read-function": "read",
				"process-function": "process",
				"write-function": "send",
				"total-count-function": "getTotalCount",
				"before-step-function": "beforeStep",
				"before-chunk-function": "",
				"after-chunk-function": "",
				"after-step-function": "afterStep",
				"chunk-size": 500,
				"transactional": false,
				"timeout-in-seconds": "14400",
				"parameters": {
					"parameter": [{
							"@name": "resourceType",
							"@type": "string",
							"description": "Used for logging purposes only [ price | product | inventory ]",
							"@required": true
						},
						{
							"@name": "fieldListOverride",
							"@type": "string",
							"description": "A comma-separated list of fields to be updated in the index. If not specified, the default list of fields will be used (defaultAttributes + Algolia_CustomFields).",
							"@required": false,
							"@trim": true
						},
						{
							"@name": "fullRecordUpdate",
							"@type": "boolean",
							"description": "Determines whether the step will perform a full record update or a partial record update. A full record update will replace the entire record in the index with the new data. A partial record update will only update the specified fields in the index.",
							"@required": false
						}
					]

				},
				"status-codes": {
					"status": [{
							"@code": "ERROR",
							"description": "Used when the step failed with an error."
						},
						{
							"@code": "OK",
							"description": "Used when the step finished successfully."
						}
					]
				}
			},
			{
				"@type-id": "custom.sendChunkOrientedDeltaProductUpdates",
				"@supports-parallel-execution": true,
				"@supports-site-context": true,
				"@supports-organization-context": false,
				"description": "Sends chunk-oriented delta updates of products returned by the B2C delta export.",
				"module": "int_algolia/cartridge/scripts/algolia/steps/sendChunkOrientedDeltaProductUpdates.js",
				"read-function": "read",
				"process-function": "process",
				"write-function": "send",
				"total-count-function": "getTotalCount",
				"before-step-function": "beforeStep",
				"before-chunk-function": "",
				"after-chunk-function": "",
				"after-step-function": "afterStep",
				"chunk-size": 500,
				"transactional": false,
				"timeout-in-seconds": "14400",
				"parameters": {
					"parameter": [{
							"@name": "consumer",
							"@type": "string",
							"description": "The name of the consumer to be used for retrieving the delta export file. Also determines the WebDAV folder for the B2C delta export, together with the deltaExportJobName parameter.",
							"@required": true
						},
						{
							"@name": "deltaExportJobName",
							"@type": "string",
							"description": "The name of the delta export job to be used for retrieving the delta export file. Also determines the WebDAV folder for the B2C delta export, together with the consumer parameter.",
							"@required": true
						},
						{
							"@name": "fieldListOverride",
							"@type": "string",
							"description": "A comma-separated list of fields to be updated in the index. If not specified, the default list of fields will be used (defaultAttributes + Algolia_CustomFields).",
							"@required": false,
							"@trim": true
						},
						{
							"@name": "indexingMethod",
							"@type": "string",
							"description": "Determines whether the step will perform a full record update or a partial record update. A full record update will replace the entire record in the index with the new data. A partial record update will only update the specified fields in the index.",
							"@required": "true",
							"enum-values": {
								"value": [
									"partialRecordUpdate",
									"fullRecordUpdate"
								]
							},
							"default-value": "fullRecordUpdate"
						}
					]
				},
				"status-codes": {
					"status": [{
							"@code": "ERROR",
							"description": "Used when the step failed with an error."
						},
						{
							"@code": "OK",
							"description": "Used when the step finished successfully."
						}
					]
				}
			}
		]
	}
}
