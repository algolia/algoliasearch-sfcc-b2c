{
    "step-types": {
        "script-module-step": [
            {
                "@type-id": "custom.algoliaCategoryIndex",
                "@supports-parallel-execution": "false",
                "@supports-site-context": "true",
                "@supports-organization-context": "false",
                "description": "Reindex all categories (incl. categories structures) assigned to the selected site to Algolia.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/algoliaCategoryIndex.js",
                "function": "runCategoryExport",
                "transactional": "false",
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "localesForIndexing",
                            "@type": "string",
                            "description": "Specify which locales to index in a comma-separated list. If not specified, the Algolia_LocalesForIndexing custom preference is used.",
                            "@required": false,
                            "@trim": true
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
            {
                "@type-id": "custom.algoliaSendDeltaExportProducts",
                "@supports-parallel-execution": "false",
                "@supports-site-context": "true",
                "@supports-organization-context": "false",
                "description": "DEPRECATED. Use 'custom.algoliaProductDeltaIndex' instead. Takes the product delta export created by SFCC, extracts the PIDs from it, retrieves and enriches the products, then sends them to Algolia. Records in the index are fully replaced.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/sendDeltaExportProducts.js",
                "function": "sendDeltaExportProducts",
                "transactional": "false",
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "consumer",
                            "@type": "string",
                            "@required": "true"
                        },
                        {
                            "@name": "deltaExportJobName",
                            "@type": "string",
                            "@required": "true"
                        },
                        {
                            "@name": "failureThresholdPercentage",
                            "@type": "long",
                            "description": "Allowed percentage of records that fails to be indexed before marking the job in error. Default: 0.",
                            "@required": false,
                            "min-value": "0",
                            "max-value": "100"
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "FINISHED",
                            "description": "Used when the step finished successfully."
                        },
                        {
                            "@code": "FINISHED_WITH_WARNINGS",
                            "description": "Used when the step finished with warnings."
                        }
                    ]
                }
            }
        ],
        "chunk-script-module-step": [
            {
                "@type-id": "custom.algoliaProductIndex",
                "@supports-parallel-execution": true,
                "@supports-site-context": true,
                "@supports-organization-context": false,
                "description": "Index all products assigned to the selected site. The list of indexed attributes is configurable. Can perform partial records updates, full records updates or a full catalog reindex. See the 'indexingMethod' parameter for details.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/algoliaProductIndex.js",
                "read-function": "read",
                "process-function": "process",
                "write-function": "send",
                "total-count-function": "getTotalCount",
                "before-step-function": "beforeStep",
                "before-chunk-function": "",
                "after-chunk-function": "",
                "after-step-function": "afterStep",
                "chunk-size": 100,
                "transactional": false,
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "attributeListOverride",
                            "@type": "string",
                            "description": "A comma-separated list of attributes to be updated in the index. If not specified, the default list of attributes will be used (defaultAttributes + Algolia_AdditionalAttributes).",
                            "@required": false,
                            "@trim": true
                        },
                        {
                            "@name": "indexingMethod",
                            "@type": "string",
                            "description": "'partialRecordUpdate': only the specified attributes are updated/added for each record (without affecting other attributes). If the record doesn't exist, a new one will be created. 'fullRecordUpdate': replace the entire record (or create new records) in the index with the specified data (without removing stale/deleted records). 'fullCatalogReindex': reindex all products (incl. removing stale records).",
                            "@required": "true",
                            "enum-values": {
                                "value": [
                                    "fullCatalogReindex",
                                    "fullRecordUpdate",
                                    "partialRecordUpdate"
                                ]
                            },
                            "default-value": "partialRecordUpdate"
                        },
                        {
                            "@name": "failureThresholdPercentage",
                            "@type": "long",
                            "description": "Allowed percentage of records that fails to be indexed before marking the job in error. Default: 0. When indexingMethod=fullCatalogReindex, the temporary index is not moved to production if the failure percentage exceeds this threshold.",
                            "@required": false,
                            "min-value":"0",
                            "max-value":"100"
                        },
                        {
                            "@name": "localesForIndexing",
                            "@type": "string",
                            "description": "Specify which locales to index in a comma-separated list. If not specified, the Algolia_LocalesForIndexing custom preference is used.",
                            "@required": false,
                            "@trim": true
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
            {
                "@type-id": "custom.algoliaProductPartialIndex",
                "@supports-parallel-execution": true,
                "@supports-site-context": true,
                "@supports-organization-context": false,
                "description": "Update all products assigned to the selected site. The list of indexed attributes is configurable. Performs partial records updates: only the specified attributes are updated/added for each record. If the record doesn't exist, a new one will be created.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/algoliaProductIndex.js",
                "read-function": "read",
                "process-function": "process",
                "write-function": "send",
                "total-count-function": "getTotalCount",
                "before-step-function": "beforeStep",
                "before-chunk-function": "",
                "after-chunk-function": "",
                "after-step-function": "afterStep",
                "chunk-size": 100,
                "transactional": false,
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "attributeListOverride",
                            "@type": "string",
                            "description": "A comma-separated list of attributes to be updated in the index. If not specified, the default list of attributes will be used (defaultAttributes + Algolia_AdditionalAttributes).",
                            "@required": false,
                            "@trim": true
                        },
                        {
                            "@name": "failureThresholdPercentage",
                            "@type": "long",
                            "description": "Allowed percentage of records that fails to be indexed before marking the job in error. Default: 0",
                            "@required": false,
                            "min-value":"0",
                            "max-value":"100"
                        },
                        {
                            "@name": "localesForIndexing",
                            "@type": "string",
                            "description": "Specify which locales to index in a comma-separated list. If not specified, the Algolia_LocalesForIndexing custom preference is used.",
                            "@required": false,
                            "@trim": true
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
            {
                "@type-id": "custom.algoliaProductDeltaIndex",
                "@supports-parallel-execution": true,
                "@supports-site-context": true,
                "@supports-organization-context": false,
                "description": "Extracts the list of productIDs (of changed products) from a B2C Delta Export, retrieves and enriches the products data, then sends them to Algolia. Can perform full records updates or partial records updates. See the 'indexingMethod' parameter for details.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/algoliaProductDeltaIndex.js",
                "read-function": "read",
                "process-function": "process",
                "write-function": "send",
                "total-count-function": "getTotalCount",
                "before-step-function": "beforeStep",
                "before-chunk-function": "",
                "after-chunk-function": "",
                "after-step-function": "afterStep",
                "chunk-size": 100,
                "transactional": false,
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "consumer",
                            "@type": "string",
                            "description": "The name of the consumer to be used for retrieving the delta export file. Also determines the WebDAV folder for the B2C delta export, together with the deltaExportJobName parameter.",
                            "@required": true
                        },
                        {
                            "@name": "deltaExportJobName",
                            "@type": "string",
                            "description": "The name of the delta export job to be used for retrieving the delta export file. Also determines the WebDAV folder for the B2C delta export, together with the consumer parameter.",
                            "@required": true
                        },
                        {
                            "@name": "attributeListOverride",
                            "@type": "string",
                            "description": "A comma-separated list of attributes to be updated in the index. If not specified, the default list of attributes will be used (defaultAttributes + Algolia_AdditionalAttributes).",
                            "@required": false,
                            "@trim": true
                        },
                        {
                            "@name": "indexingMethod",
                            "@type": "string",
                            "description": "'partialRecordUpdate': only the specified attributes are updated/added for each record (without affecting other attributes). If the record doesn't exist, a new one will be created. 'fullRecordUpdate': replace the entire record (or create new records) in the index with the specified data. Deleted products are removed from the index.",
                            "@required": "true",
                            "enum-values": {
                                "value": [
                                    "partialRecordUpdate",
                                    "fullRecordUpdate"
                                ]
                            },
                            "default-value": "fullRecordUpdate"
                        },
                        {
                            "@name": "failureThresholdPercentage",
                            "@type": "long",
                            "description": "Allowed percentage of records that fails to be indexed before marking the job in error. Default: 0",
                            "@required": false,
                            "min-value":"0",
                            "max-value":"100"
                        },
                        {
                            "@name": "localesForIndexing",
                            "@type": "string",
                            "description": "Specify which locales to index in a comma-separated list. If not specified, the Algolia_LocalesForIndexing custom preference is used.",
                            "@required": false,
                            "@trim": true
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
            {
                "@type-id": "custom.sendChunkOrientedProductUpdates",
                "@supports-parallel-execution": true,
                "@supports-site-context": true,
                "@supports-organization-context": false,
                "description": "DEPRECATED. Use 'custom.algoliaProductIndex' instead. Sends updates of all products assigned to the selected site to Algolia. The list of indexed attributes is configurable. Can perform partial records updates or full records updates.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/sendChunkOrientedProductUpdates.js",
                "read-function": "read",
                "process-function": "process",
                "write-function": "send",
                "total-count-function": "getTotalCount",
                "before-step-function": "beforeStep",
                "before-chunk-function": "",
                "after-chunk-function": "",
                "after-step-function": "afterStep",
                "chunk-size": 500,
                "transactional": false,
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "resourceType",
                            "@type": "string",
                            "@required": true
                        },
                        {
                            "@name": "fieldListOverride",
                            "@type": "string",
                            "@required": false
                        },
                        {
                            "@name": "fullRecordUpdate",
                            "@type": "boolean",
                            "@required": false
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
            {
                "@type-id": "custom.algoliaContentIndex",
                "@supports-parallel-execution": true,
                "@supports-site-context": true,
                "@supports-organization-context": false,
                "description": "Index all contents. The list of indexed attributes is configurable.",
                "module": "int_algolia/cartridge/scripts/algolia/steps/algoliaContentIndex.js",
                "read-function": "read",
                "process-function": "process",
                "write-function": "send",
                "total-count-function": "getTotalCount",
                "before-step-function": "beforeStep",
                "before-chunk-function": "",
                "after-chunk-function": "",
                "after-step-function": "afterStep",
                "chunk-size": 500,
                "transactional": false,
                "timeout-in-seconds": "3600",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "attributeList",
                            "@type": "string",
                            "description": "A comma-separated list of attributes to index.",
                            "@required": true,
                            "@trim": true,
                            "default-value": "id,name,description,url,body,page"
                        },
                        {
                            "@name": "failureThresholdPercentage",
                            "@type": "long",
                            "description": "Allowed percentage of records that fails to be indexed before marking the job in error. Default: 0. The temporary index is not moved to production if the failure percentage exceeds this threshold.",
                            "@required": false,
                            "min-value":"0",
                            "max-value":"100"
                        },
                        {
                            "@name": "splittingTag",
                            "@type": "string",
                            "description": "The HTML tag used to split the content into chunks. If not specified, the content will be split according to DEFAULT_MAX_RECORD_BYTES.",
                            "@required": false,
                            "@trim": true
                        },
                        {
                            "@name": "includedContent",
                            "@type": "string",
                            "description": "'allContents': indexes content assets and page designer components. 'contentAssets': indexes only content assets. 'pageDesignerComponents': indexes only page designer components.",
                            "@required": "true",
                            "enum-values": {
                                "value": [
                                    "allContents",
                                    "contentAssets",
                                    "pageDesignerComponents"
                                ]
                            },
                            "default-value": "allContents"
                        },
                        {
                            "@name": "localesForIndexing",
                            "@type": "string",
                            "description": "Specify which locales to index in a comma-separated list. If not specified, the Algolia_LocalesForIndexing custom preference is used.",
                            "@required": false,
                            "@trim": true
                        }
                    ]
                },
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
            {
                "@type-id": "custom.findRuleBasedPromotions",
                "@supports-parallel-execution": false,
                "@supports-site-context": true,
                "@supports-organization-context": false,
                "description": "Finds all rule based promotions and writes them to a custom object",
                "module": "int_algolia/cartridge/scripts/algolia/steps/findRuleBasedPromotions.js",
                "read-function": "read",
                "process-function": "process",
                "write-function": "send",
                "total-count-function": "getTotalCount",
                "before-step-function": "beforeStep",
                "before-chunk-function": "",
                "after-chunk-function": "",
                "after-step-function": "afterStep",
                "chunk-size": 100,
                "transactional": true,
                "timeout-in-seconds": "3600",
                "parameters": {},
                "status-codes": {
                    "status": [
                        {
                            "@code": "ERROR",
                            "description": "Used when the step failed with an error."
                        },
                        {
                            "@code": "OK",
                            "description": "Used when the step finished successfully."
                        }
                    ]
                }
            },
        ]
    }
}
